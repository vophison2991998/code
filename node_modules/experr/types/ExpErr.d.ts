/// <reference types="qs" />
import { Application, NextFunction, Request, Response } from "express";
import { IExpErrOpt, IExpError } from "./interfaces";
declare const _default: {
    options: IExpErrOpt;
    fillOptions(options: IExpErrOpt): void;
    /**
     * @param  {IExpErrOpt} options?
     * @description add configration options and assign the error function to request
     */
    config(options?: IExpErrOpt | undefined): (req: Request<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>, res: Response<any, Record<string, any>>, next: NextFunction) => void;
    /**
     * @param  {Application} app
     * @description catch errors of the application and missing targets
     */
    catchAppErrors(app: Application): void;
    handler: (err: IExpError, req: Request<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>, res: Response<any, Record<string, any>>, next: NextFunction) => void;
    targetNotFound: (req: Request<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>, res: Response<any, Record<string, any>>, next: NextFunction) => void;
};
/**
 *  @description ExpErr is an error handler model for express framework
 */
export default _default;
