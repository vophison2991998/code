"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require(".");
const StatusCodes_1 = require("./StatusCodes");
const ExpErrors = class {
    targetNotFound(req) {
        return new _1.AppErr({
            message: `This target '${req.originalUrl}'' is not found with ${req.method} 'method'`,
            status: _1.ExpErrStatuses.error,
            statusCode: StatusCodes_1.StatusCodes.NOT_FOUND,
            errCode: "E-1",
        });
    }
    signInFaild() {
        return new _1.AppErr({
            message: `Incorrect email or password `,
            status: _1.ExpErrStatuses.failed,
            statusCode: StatusCodes_1.StatusCodes.BAD_REQUEST,
            errCode: "E-2",
        });
    }
    noQery(msg) {
        return new _1.AppErr({
            message: msg,
            status: _1.ExpErrStatuses.error,
            statusCode: StatusCodes_1.StatusCodes.INTERNAL_SERVER_ERROR,
            errCode: "E-3",
        });
    }
    noDocumentMatched(msg) {
        return new _1.AppErr({
            message: `No document found : '${msg}'`,
            status: _1.ExpErrStatuses.failed,
            statusCode: StatusCodes_1.StatusCodes.BAD_REQUEST,
            errCode: "E-4",
        });
    }
    emailAlreadyExists(email) {
        return new _1.AppErr({
            message: `This Email is Already Exists : '${email}'`,
            status: _1.ExpErrStatuses.failed,
            statusCode: StatusCodes_1.StatusCodes.CONFLICT,
            errCode: "E-5",
        });
    }
    notAuth() {
        return new _1.AppErr({
            message: `Not Authorized`,
            status: _1.ExpErrStatuses.error,
            statusCode: StatusCodes_1.StatusCodes.FORBIDDEN,
            errCode: "E-6",
        });
    }
    serverError() {
        return new _1.AppErr({
            message: `Not Authorized`,
            status: _1.ExpErrStatuses.error,
            statusCode: StatusCodes_1.StatusCodes.INTERNAL_SERVER_ERROR,
            errCode: "E-7",
        });
    }
    authFaild() {
        return new _1.AppErr({
            message: `Authorization Faild`,
            status: _1.ExpErrStatuses.failed,
            statusCode: StatusCodes_1.StatusCodes.FORBIDDEN,
            errCode: "E-8",
        });
    }
    validationError(msg) {
        return new _1.AppErr({
            message: `Validation Error: '${msg}'`,
            status: _1.ExpErrStatuses.failed,
            statusCode: StatusCodes_1.StatusCodes.BAD_REQUEST,
            errCode: "E-9",
        });
    }
};
exports.default = new ExpErrors();
