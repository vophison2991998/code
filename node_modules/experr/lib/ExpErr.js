"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ExpErrors_1 = __importDefault(require("./ExpErrors"));
const AppError_1 = __importDefault(require("./AppError"));
const constants_1 = require("./constants");
const ExpErr = class {
    constructor(options = constants_1.defaultOptions) {
        this.handler = (err, req, res, next) => {
            this.options.logError && console.log(err);
            res.status(err.statusCode || this.options.defaultErrStatusCode).json({
                status: err.status || this.options.defaultErrStatus,
                errCode: err.errCode || this.options.defaultErrCode,
                // stack: options.showStack ? err.stack : undefined,
                message: err.message || err || this.options.defaultErrMessage,
            });
        };
        this.targetNotFound = (req, res, next) => next(ExpErrors_1.default.targetNotFound(req));
        this.options = options;
        this.fillOptions(options);
    }
    fillOptions(options) {
        this.options = Object.assign(Object.assign({}, options), { defaultErrStatus: options.defaultErrStatus || constants_1.defaultOptions.defaultErrStatus, defaultErrStatusCode: options.defaultErrStatusCode || constants_1.defaultOptions.defaultErrStatusCode, defaultErrMessage: options.defaultErrMessage || constants_1.defaultOptions.defaultErrMessage, 
            //   showStack: options.showStack || defaultOptions.showStack,
            logError: options.logError || constants_1.defaultOptions.logError });
    }
    /**
     * @param  {IExpErrOpt} options?
     * @description add configration options and assign the error function to request
     */
    config(options) {
        options && this.fillOptions(options);
        return (req, res, next) => {
            req.error = (err) => next(new AppError_1.default(err));
            next();
        };
    }
    /**
     * @param  {Application} app
     * @description catch errors of the application and missing targets
     */
    catchAppErrors(app) {
        app.all("*", this.targetNotFound);
        app.use(this.handler);
    }
};
/**
 *  @description ExpErr is an error handler model for express framework
 */
exports.default = new ExpErr();
